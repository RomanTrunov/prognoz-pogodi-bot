import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from datetime import datetime, timedelta
import aiohttp
import re
import asyncio

API_TOKEN = '7485854939:AAG2lgFEnJX-cxngmdT9xVqkTfWtveR4cfY'
WEATHER_API_KEY = 'e7d29518081a74729fa77b59c4d67381'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class WeatherForm(StatesGroup):
    waiting_for_city = State()
    waiting_for_custom_city = State()
    waiting_for_date = State()
    waiting_for_custom_date = State()
    waiting_for_time = State()

def get_city_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(KeyboardButton(text="üèôÔ∏è –ú–æ—Å–∫–≤–∞"), KeyboardButton(text="üèôÔ∏è –ê–±–∞–∫–∞–Ω"))
    builder.row(KeyboardButton(text="üåÜ –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥"))
    return builder.as_markup(resize_keyboard=True)

def get_date_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(KeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è"), KeyboardButton(text="üìÖ –ó–∞–≤—Ç—Ä–∞"))
    builder.row(KeyboardButton(text="üìÜ –î—Ä—É–≥–∞—è –¥–∞—Ç–∞"))
    return builder.as_markup(resize_keyboard=True)

def get_time_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(KeyboardButton(text="üåÖ –£—Ç—Ä–æ"), KeyboardButton(text="‚òÄÔ∏è –î–µ–Ω—å"), KeyboardButton(text="üåÜ –í–µ—á–µ—Ä"))
    return builder.as_markup(resize_keyboard=True)

def get_final_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(KeyboardButton(text="üîÑ –ù–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã"))
    builder.row(KeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å"))
    return builder.as_markup(resize_keyboard=True)

@dp.message(Command(commands=['start', 'help']))
async def send_welcome(message: types.Message, state: FSMContext):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=get_city_keyboard())
    await state.set_state(WeatherForm.waiting_for_city)

@dp.message(WeatherForm.waiting_for_city)
async def process_city(message: types.Message, state: FSMContext):
    if message.text == "üåÜ –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥":
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(WeatherForm.waiting_for_custom_city)
    else:
        city = message.text.split()[1]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
        await state.update_data(city=city)
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=get_date_keyboard())
        await state.set_state(WeatherForm.waiting_for_date)

@dp.message(WeatherForm.waiting_for_custom_city)
async def process_custom_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=get_date_keyboard())
    await state.set_state(WeatherForm.waiting_for_date)

@dp.message(WeatherForm.waiting_for_date)
async def process_date(message: types.Message, state: FSMContext):
    if message.text == "üìÜ –î—Ä—É–≥–∞—è –¥–∞—Ç–∞":
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(WeatherForm.waiting_for_custom_date)
    else:
        if message.text == "üìÖ –°–µ–≥–æ–¥–Ω—è":
            date = datetime.now().strftime("%d-%m-%Y")
        elif message.text == "üìÖ –ó–∞–≤—Ç—Ä–∞":
            date = (datetime.now() + timedelta(days=1)).strftime("%d-%m-%Y")

        await state.update_data(date=date)
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫:", reply_markup=get_time_keyboard())
        await state.set_state(WeatherForm.waiting_for_time)

@dp.message(WeatherForm.waiting_for_custom_date)
async def process_custom_date(message: types.Message, state: FSMContext):
    date_input = message.text
    date_pattern = r'\d{1,2}[-./]\d{1,2}[-./]\d{4}'
    if re.match(date_pattern, date_input):
        date = re.sub(r'[-./]', '-', date_input)
        await state.update_data(date=date)
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫:", reply_markup=get_time_keyboard())
        await state.set_state(WeatherForm.waiting_for_time)
    else:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î-–ú–ú-–ì–ì–ì–ì.")

@dp.message(WeatherForm.waiting_for_time)
async def process_time(message: types.Message, state: FSMContext):
    time = message.text.split()[1]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
    data = await state.get_data()
    city = data['city']
    date = data['date']

    weather_data = await get_weather(city, date)
    if not weather_data:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.")
        await ask_for_next_action(message, state)
        return

    forecast_index = {'–£—Ç—Ä–æ': 0, '–î–µ–Ω—å': 1, '–í–µ—á–µ—Ä': 2}
    forecast = weather_data[forecast_index[time]]

    temp = round(forecast['main']['temp'])
    description = forecast['weather'][0]['description']
    humidity = forecast['main']['humidity']
    wind_speed = forecast['wind']['speed']

    await message.reply(
        f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {date} ({time}) –≤ –≥–æ—Ä–æ–¥–µ {city}:\n"
        f"–ü–æ–≥–æ–¥–∞: {description.capitalize()}\n"
        f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
        f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
        f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å",
        reply_markup=get_final_keyboard()
    )
    await state.set_state(WeatherForm.waiting_for_city)

@dp.message(F.text == "üîÑ –ù–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã")
async def new_forecast(message: types.Message, state: FSMContext):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=get_city_keyboard())
    await state.set_state(WeatherForm.waiting_for_city)

@dp.message(F.text == "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å")
async def end_session(message: types.Message, state: FSMContext):
    await message.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
                        reply_markup=ReplyKeyboardRemove())
    await state.clear()

async def get_weather(city: str, date: str):
    async with aiohttp.ClientSession() as session:
        url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
        async with session.get(url) as response:
            weather_data = await response.json()
            if weather_data.get("list"):
                target_date = datetime.strptime(date, "%d-%m-%Y").date()
                forecasts = [
                    forecast for forecast in weather_data["list"]
                    if datetime.fromtimestamp(forecast['dt']).date() == target_date
                ]
                if forecasts:
                    morning = next((f for f in forecasts if 6 <= datetime.fromtimestamp(f['dt']).hour < 12),
                                   forecasts[0])
                    day = next((f for f in forecasts if 12 <= datetime.fromtimestamp(f['dt']).hour < 18), forecasts[0])
                    evening = next((f for f in forecasts if 18 <= datetime.fromtimestamp(f['dt']).hour < 24),
                                   forecasts[-1])
                    return [morning, day, evening]
            return None

async def main():
    # –£–¥–∞–ª—è–µ–º –ª—é–±—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–µ–±—Ö—É–∫–∏
    await bot.delete_webhook(drop_pending_updates=True)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

if __name__ == '__main__':
    asyncio.run(main())
